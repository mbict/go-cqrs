{{define "DB_REPOSITORY" -}}
{{- $row := untitle .Repository.Model.TypeName -}}
package sql
{{- template "IMPORTS" .Imports}}

type db{{title .Repository.Name}}Repository struct {
	db *sql.DB
}

var (
	{{untitle .Repository.Name}}Query = squirrel.Select({{range $i, $field := .Repository.Model.Type}}{{if $i}}, {{end}}"{{snake $field.Name}}"{{end}}).From("{{snake .Repository.Name}}")
)

func New{{title .Repository.Name}}Repository(db *sql.DB) repository.{{title .Repository.Name}}Repository {
	return &db{{title .Repository.Name}}Repository{
		db: db,
	}
}

func (r *db{{title .Repository.Name}}Repository) FindAll({{if .Repository.Filter}}filter *{{title .Repository.Name}}Filter{{end}}) ([]*models.{{title .Repository.Model.TypeName}}, error) {
	rows, err := {{if .Repository.Filter -}}r.apply(filter){{else}}{{untitle .Repository.Name}}Query{{end}}.RunWith(r.db).Query()
	if err != nil && err != sql.ErrNoRows {
		return nil, err
	}

	var result []*models.{{title .Repository.Model.TypeName}}
	for rows.Next() {
		{{$row}} := models.{{title .Repository.Model.TypeName}}{}
		err = rows.Scan({{range $i, $field := .Repository.Model.Type}}{{if $i}}, {{end}}&{{$row}}.{{title $field.Name}}{{end}})
		if err != nil {
			return nil, err
		}
		result = append(result, &{{$row}})
	}
	return result, nil
}

func (r *db{{title .Repository.Name}}Repository) Find(id uuid.UUID) (*models.{{title .Repository.Model.TypeName}}, error) {
	var {{$row}} models.{{title .Repository.Model.TypeName}}
	row := {{untitle .Repository.Name}}Query.Where("id = ?", id).RunWith(r.db).QueryRow()
	err := row.Scan({{range $i, $field := .Repository.Model.Type}}{{if $i}}, {{end}}&{{$row}}.{{title $field.Name}}{{end}})

	if err == sql.ErrNoRows {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &{{$row}}, nil
}

{{- if .Repository.Filter}}
func (f *db{{title .Repository.Name}}Repository) apply(filter *{{title .Repository.Name}}Filter) squirrel.SelectBuilder {
	builder := {{untitle .Repository.Name}}Query
{{template "DB_REPOSITORY_FILTER" .Repository.Filter}}
	return builder
}
{{end}}
{{- end}}

{{define "DB_REPOSITORY_FILTER" -}}
{{range $i, $field := .Type}}
{{- if eq $field.Attribute.Type.Name "boolean" "int32" "int64" "uint32" "uint64" "float32" "float64"}}
	if len(filter.{{title $field.Name}}) > 0 {
		{{template "DB_REPOSITORY_FILTER_TYPE" $field}}
	}
{{- else if eq $field.Attribute.Type.Name "string"}}
	if len(filter.{{title $field.Name}}) > 0 {
		{{template "DB_REPOSITORY_FILTER_TYPE" $field}}
	}
{{- else if eq $field.Attribute.Type.Name "array"}}
	if len(filter.{{title $field.Name}}) > 0 {
		{{template "DB_REPOSITORY_FILTER_TYPE" dict "Name" $field.Name "Attribute" $field.Attribute.Type.ElemType}}
	}
{{- else if eq $field.Attribute.Type.Name "map"}}
	// not implemented []map
{{- else if eq $field.Attribute.Type.Name "[]byte"}}
	// not implemented []byte
{{- else if eq $field.Attribute.Type.Name "any"}}
	if len(filter.{{title $field.Name}}) > 0 {
		{{template "DB_REPOSITORY_FILTER_TYPE" $field}}
	}
{{- else}}
	// not implemented custom types {{packageName $field.Attribute.Type.Package}}.{{$field.Attribute.Type.Name}}
{{- end}}
{{end}}
{{- end}}



{{define "DB_REPOSITORY_FILTER_TYPE" -}}
{{- if eq .Attribute.Type.Name "boolean" "int32" "int64" "uint32" "uint64" "float32" "float64" -}}
	builder = builder.Where(squirrel.Eq{"{{snake .Name}}": filter.{{title .Name}}})
{{- else if eq .Attribute.Type.Name "string" -}}
	builder = builder.Where(like("{{snake .Name}}", filter.{{title .Name}}))
{{- else if eq .Attribute.Type.Name "array" -}}
	//not implemented nested arrays
{{- else if eq .Attribute.Type.Name "map" -}}
	// not implemented []map
{{- else if eq .Attribute.Type.Name "[]byte" -}}
	// not implemented []byte
{{- else if eq .Attribute.Type.Name "any" -}}
	builder = builder.Where(squirrel.Eq{"{{snake .Name}}": filter.{{title .Name}}})
{{- else  if eq .Attribute.Type.Name "UUID" -}}
	builder = builder.Where(squirrel.Eq{"{{snake .Name}}": filter.{{title .Name}}})
{{- else -}}
	 // not implemented custom types {{packageName .Attribute.Type.Package}}.{{.Attribute.Type.Name}}
{{- end}}
{{- end}}