// Code generated by mockery v1.0.0. DO NOT EDIT.

package cqrs

import mock "github.com/stretchr/testify/mock"

// MockAggregateContext is an autogenerated mock type for the AggregateContext type
type MockAggregateContext struct {
	mock.Mock
}

// AggregateId provides a mock function with given fields:
func (_m *MockAggregateContext) AggregateId() AggregateId {
	ret := _m.Called()

	var r0 AggregateId
	if rf, ok := ret.Get(0).(func() AggregateId); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(AggregateId)
		}
	}

	return r0
}

// OriginalVersion provides a mock function with given fields:
func (_m *MockAggregateContext) OriginalVersion() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// StoreEvent provides a mock function with given fields: _a0
func (_m *MockAggregateContext) StoreEvent(_a0 EventData) {
	_m.Called(_a0)
}

// Version provides a mock function with given fields:
func (_m *MockAggregateContext) Version() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// clearUncommittedEvents provides a mock function with given fields:
func (_m *MockAggregateContext) clearUncommittedEvents() {
	_m.Called()
}

// getUncommittedEvents provides a mock function with given fields:
func (_m *MockAggregateContext) getUncommittedEvents() []Event {
	ret := _m.Called()

	var r0 []Event
	if rf, ok := ret.Get(0).(func() []Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event)
		}
	}

	return r0
}

// incrementVersion provides a mock function with given fields:
func (_m *MockAggregateContext) incrementVersion() {
	_m.Called()
}

// setVersion provides a mock function with given fields: _a0
func (_m *MockAggregateContext) setVersion(_a0 int) {
	_m.Called(_a0)
}
